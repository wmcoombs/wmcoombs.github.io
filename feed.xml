<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://wmcoombs.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wmcoombs.github.io/" rel="alternate" type="text/html" /><updated>2019-10-31T08:46:07+00:00</updated><id>https://wmcoombs.github.io/</id><title type="html">AMPLE - A Material Point Learning Environment</title><subtitle>AMPLE A Material Point Learning Environment
</subtitle><author><name>AMPLE&amp;#58;  A Material Point Learning Environment</name></author><entry><title type="html">Material Point Method</title><link href="https://wmcoombs.github.io/mpm/" rel="alternate" type="text/html" title="Material Point Method" /><published>2019-01-08T06:00:00+00:00</published><updated>2019-01-08T06:00:00+00:00</updated><id>https://wmcoombs.github.io/mpm</id><content type="html" xml:base="https://wmcoombs.github.io/mpm/">&lt;p&gt;Numerical approaches based on Lagrangian mechanics, particularly using the finite element method, dominate the analysis of solid mechanics problems.  However there are issues with mesh-based Lagrangian approaches for problems involving very large deformation in that the discretisation used to analyse the physical problem becomes distorted leading to inaccurate results and, in extreme cases, eventual breakdown of the numerics due to element inversion.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Material Point Method&lt;/strong&gt; (MPM) is an alternative to pure Lagrangian approaches and is well suited to problems involving very large deformations.  The method was developed in the 1990’s by Sulsky &lt;em&gt;et al.&lt;/em&gt; [1] as a solid mechanics extension to the FLuid Implicit Particle (FLIP) method [2] which itself was developed from the Particle-In-Cell (PIC) method [3].  In the material point method, equilibrium computations take place on a background grid but the calculations are based on information (mass, volume, stress, state variables, etc.) held at material points that are convected through the background grid as the material deforms. This allows computations to take place on an undistorted background mesh (structured or unstructured) whilst modelling problems involving very large deformations. One way to summarise the material point method is: &lt;em&gt;a finite element method where the integration points (material points) are allowed to move independently of the mesh&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;AMPLE, unlike most of the MPM community, adopts an implicit formulation.  The key steps in an implicit implementation of the material point method are shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/MPMsteps.jpg&quot; alt=&quot;MPM steps&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[1] D. Sulsky, Z. Chen, H. Schreyer, A particle method for history-dependent materials, Computer Methods in Applied Mechanics and Engineering 118 (1994) 179–196.&lt;br /&gt;
[2] J.U. Brackbill, H.M. Ruppel, FLIP - A method for adaptively zoned, particle-in-cell calculations of fluid flows in two dimensions, Journal of Computational Physics 65 (1986), 314-343.&lt;br /&gt;
[3] F. Harlow, The particle-in-cell computing method for fluid dynamics, Methods for Computational Physics 3 (1964). &lt;br /&gt;&lt;/p&gt;</content><author><name>AMPLE&amp;#58;  A Material Point Learning Environment</name></author><summary type="html">Numerical approaches based on Lagrangian mechanics, particularly using the finite element method, dominate the analysis of solid mechanics problems. However there are issues with mesh-based Lagrangian approaches for problems involving very large deformation in that the discretisation used to analyse the physical problem becomes distorted leading to inaccurate results and, in extreme cases, eventual breakdown of the numerics due to element inversion.</summary></entry><entry><title type="html">Development Principles</title><link href="https://wmcoombs.github.io/principles/" rel="alternate" type="text/html" title="Development Principles" /><published>2019-01-07T06:00:00+00:00</published><updated>2019-01-07T06:00:00+00:00</updated><id>https://wmcoombs.github.io/principles</id><content type="html" xml:base="https://wmcoombs.github.io/principles/">&lt;p&gt;AMPLE was developed with the following principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;MATLAB-based&lt;/strong&gt; - the material point method is complex in that in order to implement a &lt;em&gt;useful&lt;/em&gt; MPM code it is necessary for the developer to understand: finite element analysis, large deformation mechanics, non-linear solution methods and material non-linearity (elasto-plasticity).  This results in a very steep learning curve (see below) and if users/developers have to understand thousands of lines of Fortran/C/C++ code the hurdle may become insurmountable for some.  AMPLE has been developed in MATLAB to remove, or at least significantly lessen, the syntax learning curve.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Compact&lt;/strong&gt; - inspired by Nick Trefethen’s philosophy of &lt;strong&gt;ten digit algorithms&lt;/strong&gt;: &lt;em&gt;“…a little gem of a program to compute something numerical: Ten digits, Five seconds, And just one page”&lt;/em&gt; [1]. If a program is compact enough to be viewed on a single page it allows the structure of the whole algorithm to be understood and visualised, making mistakes and misunderstandings far less likely.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Modular &amp;amp; expandable&lt;/strong&gt; - AMPLE has been written as a series of compact functions called by a core analysis script.  For example, the link between the material points and the background mesh is contained within one function and all of the other functions remain unchanged if the background mesh is changed.  The continuum mechanics formulation is contained in another function and the material model (stress-strain relationship) in another.  This allows users/developers to quickly understand the purpose of each of the functions and adapt/modify/replace functions as required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rigorous&lt;/strong&gt; - all aspects of AMPLE have been verified and are based on a rigorous updated Lagrangian continuum mechanics framework.  The implemented algorithms are based on published material, including convergence analysis to ensure that the fundamentals of the code our sound.  This should provide confidence when using/expanding AMPLE.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Proof rather than performance&lt;/strong&gt; - it is well documented that MATLAB is not as computationally efficient as compiled languages (such as Fortran or C/C++).  However, the focus of AMPLE is on proof of new concepts and ideas, not high performance computations.  It provides a environment for researchers to understand the material point method and test out new ideas.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/curve2.jpg&quot; alt=&quot;MPM learning curve&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[1] L.N. Trefethen (2005), &lt;a href=&quot;https://people.maths.ox.ac.uk/trefethen/publication/PDF/2005_114.pdf&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Ten Digit Algorithms&lt;/em&gt;&lt;/a&gt;, Numerical Analysis Report 05/13, Oxford University.&lt;/p&gt;</content><author><name>AMPLE&amp;#58;  A Material Point Learning Environment</name></author><summary type="html">AMPLE was developed with the following principles:</summary></entry><entry><title type="html">Formulation</title><link href="https://wmcoombs.github.io/formulation/" rel="alternate" type="text/html" title="Formulation" /><published>2019-01-06T06:00:00+00:00</published><updated>2019-01-06T06:00:00+00:00</updated><id>https://wmcoombs.github.io/formulation</id><content type="html" xml:base="https://wmcoombs.github.io/formulation/">&lt;p&gt;AMPLE is based on a number of published papers that describe fully the underlying continuum mechanics framework, material point discretisation approach and the numerical solution method.  In particular, Charlton &lt;em&gt;et al.&lt;/em&gt;’s 2017 Generalised Interpolation Material Point Method paper [1] provides the scientific basis of AMPLE.  Key aspects of the formulation are described below.&lt;/p&gt;

&lt;h2 id=&quot;equilibrium&quot;&gt;Equilibrium&lt;/h2&gt;

&lt;p&gt;AMPLE adopts an updated Lagrangian weak statement of equilibrium for quasi-static analysis.  The Galerkin form of the weak statement of equilibrium over each background grid element, &lt;script type=&quot;math/tex&quot;&gt;E&lt;/script&gt;, can be expressed as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_{\varphi_t(E)}[\nabla_x S_{vp}]^{T}\{\sigma\} \text{d}v - \int_{\varphi_t(E)}[S_{vp}]^{T}\{b\} \text{d}v - \int_{\varphi_t(\partial E)}[S_{vp}]^{T}\{t\} \text{d}s = \{0\}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;\varphi_t&lt;/script&gt; is the motion of the material body which is subjected to tractions, &lt;script type=&quot;math/tex&quot;&gt;\{t\}&lt;/script&gt;, on its boundary, &lt;script type=&quot;math/tex&quot;&gt;\partial E&lt;/script&gt; with surface, &lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;, and body forces, &lt;script type=&quot;math/tex&quot;&gt;\{b\}&lt;/script&gt;, acting over its volume, &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;.  These external forces lead to a Cauchy stress field, &lt;script type=&quot;math/tex&quot;&gt;\{\sigma\}&lt;/script&gt;, through the body. &lt;script type=&quot;math/tex&quot;&gt;[\nabla_x S_{vp}]&lt;/script&gt; is the tensorial form of the strain-displacement matrix containing derivatives of the basis functions, &lt;script type=&quot;math/tex&quot;&gt;[S_{vp}]&lt;/script&gt;, with respect to the updated coordinates, &lt;script type=&quot;math/tex&quot;&gt;\{x\}&lt;/script&gt;. The first term in the equilibrium equation is the internal force within an element and the combination of the second (body forces) and third (tractions) terms is the external force vector. The equilibrium equation is non-linear in terms of the unknown nodal displacements and can be efficiently solved using the standard implicit Newton-Raphson procedure (see below).&lt;/p&gt;

&lt;h2 id=&quot;large-deformation-mechanics&quot;&gt;Large deformation mechanics&lt;/h2&gt;

&lt;p&gt;In large deformation analysis the deformation gradient provides the fundamental link between the original and the deformed states of a body. For elasto-plasticity this deformation gradient can be multiplicatively decomposed into elastic and plastic components.  In AMPLE, this multiplicative decomposition is combined with a linear relationship between elastic logarithmic (or Henky) strains and Kirchhoff stress.  This allows any small strain constitutive model to be included within the code without modification.&lt;/p&gt;

&lt;h2 id=&quot;constitutive-model&quot;&gt;Constitutive model&lt;/h2&gt;

&lt;p&gt;Constitutive models provide the fundamental link between stress and strain within any stress analysis algorithm.  Two constitutive models are included within AMPLE:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;linear elasticity; and&lt;/li&gt;
  &lt;li&gt;linear elastic-perfectly plasticity with an associated flow von Mises yield envelope.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is straightforward to include other constitutive models.&lt;/p&gt;

&lt;h2 id=&quot;material-point-discretisation&quot;&gt;Material point discretisation&lt;/h2&gt;

&lt;p&gt;In material point methods the physical domain is discretised by a number of material points.  These points are used to numerically approximate the stiffness of the elements in the background mesh, essentially replacing the conventional Gauss points (or other integration method).  The key difference between material point and finite element methods is that these integration points move relative to the background mesh rather than being directly coupled to the positions of the background grid nodes.&lt;/p&gt;

&lt;p&gt;The internal force contribution of a single material point to the background mesh can be expressed as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\{f^p\} = [\nabla_x S_{vp}]^{T}\{\sigma\}v_p&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;v_p&lt;/script&gt; the volume associated with the material point.  Linearising the internal force with respect to the unknown nodal displacements gives the stiffness contribution of a single material point to the background mesh as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;[k^p] = [\nabla_x S_{vp}]^{T}[D][\nabla_x S_{vp}]v_p&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;[D]&lt;/script&gt; is the stiffness associated with the material point.  Note the constitutive models included within AMPLE return the algorithmic consistent tangent that ensures optimum convergence of the Newton process that minimises the global out of balance forces.  As with the finite element method, in the material point method the individual contributions of the material points must be assembled into a global stiffness matrix and internal force vector.&lt;/p&gt;

&lt;h2 id=&quot;boundary-conditions&quot;&gt;Boundary conditions&lt;/h2&gt;

&lt;p&gt;As with other numerical methods that decouple the physical boundaries of the analysis domain with the computational mesh, boundary conditions are one of the more challenging aspects of the material point method.&lt;/p&gt;

&lt;p&gt;In implicit material point formulations &lt;strong&gt;displacement boundary conditions&lt;/strong&gt; must, in some way, be imposed on the background mesh.  In AMPLE displacement boundary conditions are imposed directly on the background mesh.  This restricts the forms of boundaries that can be modelled in the method; see our publications on boundary conditions for how to extend to more complex cases.&lt;/p&gt;

&lt;p&gt;Two types of &lt;strong&gt;external loads&lt;/strong&gt; are included within AMPLE:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;body forces, such as gravitational loads, that are controlled by the mass at each material point and the imposed gravitational load; and&lt;/li&gt;
  &lt;li&gt;point forces that are held at material points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Traction boundary conditions are not included in the initial AMPLE release.&lt;/p&gt;

&lt;h2 id=&quot;non-linear-solution&quot;&gt;Non-linear solution&lt;/h2&gt;

&lt;p&gt;AMPLE adopts an implicit solution procedure based on a full Newton-Raphson method.  In this iterative method, the stiffness of the background mesh is determined within each iteration of each loadstep based on the stiffness of each of the material points.  The algorithm continues until the equilibrium equation converges within a given tolerance.  Once equilibrium has been obtained the material points can be updated.&lt;/p&gt;

&lt;h2 id=&quot;material-point-update&quot;&gt;Material point update&lt;/h2&gt;

&lt;p&gt;Once equilibrium has been found the position, volume, deformation gradient, stress and elastic strain at each of the material points needs to be updated by mapping the background grid displacement field to the material points using the basis functions.  Once this is complete the background mesh can be replaced or reset as appropriate.  In AMPLE the background mesh is simply reset to the original position.&lt;/p&gt;

&lt;h2 id=&quot;computational-procedure&quot;&gt;Computational procedure&lt;/h2&gt;

&lt;p&gt;The applied body forces and/or tractions are split into a number of loadsteps and for each of these steps the following process is adopted:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;calculate the stiffness contribution, &lt;script type=&quot;math/tex&quot;&gt;[k^p]&lt;/script&gt;, of all of the material points and assemble the individual contribution of each material point into the global stiffness matrix;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;calculate the internal force contribution, &lt;script type=&quot;math/tex&quot;&gt;\{f^p\}&lt;/script&gt;, of all of the material points and assemble the contributions into the global internal force vector;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;increment the external tractions and/or body forces and solve for the nodal displacements within a loadstep,  using the Newton-Raphson process until the out-of-balance force converges within a specified tolerance;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the material point positions and volumes can then be updated through interpolation from node data;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;reset or replace the background grid.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These steps are shown schematically below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/MPMsteps.jpg&quot; alt=&quot;MPM steps&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[1] TJ Charlton, WM Coombs &amp;amp; CE Augarde, &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0045794917303395?via%3Dihub&quot; target=&quot;_blank&quot;&gt;iGIMP: an implicit Generalised Interpolation Material Point Method for large deformations&lt;/a&gt;, Computers and Structures, 190 (2017), 108-125. &lt;em&gt;Gold open access&lt;/em&gt; &lt;i class=&quot;ai ai-open-access&quot;&gt;&lt;/i&gt;&lt;/p&gt;</content><author><name>AMPLE&amp;#58;  A Material Point Learning Environment</name></author><summary type="html">AMPLE is based on a number of published papers that describe fully the underlying continuum mechanics framework, material point discretisation approach and the numerical solution method. In particular, Charlton et al.’s 2017 Generalised Interpolation Material Point Method paper [1] provides the scientific basis of AMPLE. Key aspects of the formulation are described below.</summary></entry><entry><title type="html">Code Structure</title><link href="https://wmcoombs.github.io/structure/" rel="alternate" type="text/html" title="Code Structure" /><published>2019-01-05T06:00:00+00:00</published><updated>2019-01-05T06:00:00+00:00</updated><id>https://wmcoombs.github.io/structure</id><content type="html" xml:base="https://wmcoombs.github.io/structure/">&lt;p&gt;AMPLE’s high-level structure is below and comprises three loops:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;a loadstep &lt;strong&gt;for&lt;/strong&gt; loop that first determines the external forces at the nodes for the current step and then calculates the nodal basis functions and spatial derivatives for each material point.  The code then enters a &lt;strong&gt;while&lt;/strong&gt; loop to find equilibrium between the internal and external forces. Once equilibrium has been obtained the material point positions and internal variables (deformation gradient, stress, elastic logarithmic strain, domain size, etc.) are updated.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a Newton-Raphson &lt;strong&gt;while&lt;/strong&gt; loop to solve the global equilibrium equations on the background mesh.  The loop first solves the non-linear system of equations to determine the displacement and reaction force increments at the nodes before moving onto the determination of the current internal force and stiffness via a material point &lt;strong&gt;for&lt;/strong&gt; loop.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a material point &lt;strong&gt;for&lt;/strong&gt; loop that determines the internal force and stiffness contribution of each of the material points to the background mesh.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/alg.jpg&quot; alt=&quot;AMPLE algorithm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AMPLE’s main script, &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;, is shown in its entirety below.  The format of the code aligns with the algorithm shown above.  Comments are shown in green and have been truncated on the right hand side for clarity of the executed code.  Only two of the three loops described above can be seen in the main &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt; file: (1) a loadstep &lt;strong&gt;for&lt;/strong&gt; loop spanning lines 9 through 33 and
(2) a Newton-Raphson &lt;strong&gt;while&lt;/strong&gt; loop over lines 21 through 30.  The material point loop is contained within the  &lt;code class=&quot;highlighter-rouge&quot;&gt;detMPs.m&lt;/code&gt; function on line 25.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ampleMain.jpg&quot; alt=&quot;AMPLE main code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt; script calls eight functions, the purpose of each of these functions is explained below:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setupGrid&lt;/code&gt;: called on line 3 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;, the function returns the analysis-specific information such as details of the background grid and any information held at material points (position, material properties, etc.).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;elemMPinfo&lt;/code&gt;: called on line 1 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;, the function determines the parent element(s) of each material point and the nodes that the material point influences.  Note that for the standard material point method each material point will only have one parent element but in the generalised interpolation material point method the domain of the point can overlap multiple elements.  The function also determines the basis functions at each of the material points and their spatial gradients based on the nodal positions at the start of the load step.  The function calls three other functions: &lt;code class=&quot;highlighter-rouge&quot;&gt;elemForMP&lt;/code&gt; that finds the element(s) associated with the material point, &lt;code class=&quot;highlighter-rouge&quot;&gt;nodesForMP&lt;/code&gt; that determines a unique list of nodes based on the element(s) associated with the material point and &lt;code class=&quot;highlighter-rouge&quot;&gt;MPMbasis&lt;/code&gt; that determines the basis functions for the material point.  This function depends on the type of material point method and the form of the background mesh.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;detExtForce&lt;/code&gt;: called on line 12 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;, the function determines the external force vector at the start of the load step based on the body and point forces at material points.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;detFDoFs&lt;/code&gt;: called on line 18 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;, the function determines a list of the unknown displacement degrees of freedom of the background mesh based on the elements that &lt;em&gt;contain&lt;/em&gt; material points and the displacement boundary conditions imposed on the mesh.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;linSolve&lt;/code&gt;: called on line 22 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;, the function solves the linear system of equations to determine the iterative increment in the nodal displacements based on the current out-of-balance force residual.  The function also determines the increment in the reaction forces due to the constrained degrees of freedom on the background mesh.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;detMPs&lt;/code&gt;: called on line 25 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;, the function determines the stiffness and internal force contribution of each material point to the background mesh and assembles these into a global stiffness matrix and internal force vector.  This function contains the updated Lagrangian formulation and the constitutive model controlling the stress-strain behaviour of each material point.  The function calls three other functions: &lt;code class=&quot;highlighter-rouge&quot;&gt;Hooke3D&lt;/code&gt; a linear elastic constitutive model, &lt;code class=&quot;highlighter-rouge&quot;&gt;VMconst&lt;/code&gt; a linear elastic perfectly plastic von Mises constitutive model and &lt;code class=&quot;highlighter-rouge&quot;&gt;formULstiff&lt;/code&gt; a function to determine the consistent spatial tangent modulus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;updateMPs&lt;/code&gt;: called on line 31 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;, the function updates the positions and volumes of the material points based on the incremental nodal displacements and the current value of the deformation gradient at each material point.  For generalised interpolation material point methods, the function also updates the domain lengths.  This function depends on the type of material point method and will require modification if a user wishes to implement other domain-based methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;postPro&lt;/code&gt;: called on line 32 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;, the function produces VTK output files that can be viewed when the analysis has finished via a suitable VTK file visualised (such as VisIt or Paraview, amongst others).  The function calls two functions: &lt;code class=&quot;highlighter-rouge&quot;&gt;makeVtk&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;makeVtkMP&lt;/code&gt; that generate VTK files for the background mesh and the material points, respectively.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The structure of these functions is shown diagrammatically below, where the solid and dashed lines around the function boxes indicate that the function does or does not calls other functions, respectively.  The black arrows indicate the function calls and the locations of the loops in the code are indicated by the grey lines.  For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hook3d.m&lt;/code&gt; is called by &lt;code class=&quot;highlighter-rouge&quot;&gt;detMPs.m&lt;/code&gt;; and &lt;code class=&quot;highlighter-rouge&quot;&gt;linSolve.m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;detMPs.m&lt;/code&gt; are called within the equilibrium, or N-R, loop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/codeStructure.jpg&quot; alt=&quot;AMPLE code structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The majority of AMPLE’s functions do not depend on: (i) the form of the background mesh, (ii) the type of material point methods adopted or (iii) the number of physical dimensions (1D, 2D plane strain or 3D).  The exceptions to this are: &lt;code class=&quot;highlighter-rouge&quot;&gt;elemMPinfo.m&lt;/code&gt; which depends on the background mesh type and the material point variant and &lt;code class=&quot;highlighter-rouge&quot;&gt;updateMPs.m&lt;/code&gt; which depends on the material point variant as different updating procedures are required for different material point methods.  Obviously &lt;code class=&quot;highlighter-rouge&quot;&gt;setupGrid.m&lt;/code&gt; depends on all three of the above points as it contains the analysis-specific information that will change depending on the user’s requirements.&lt;/p&gt;

&lt;p&gt;The functions are organised into a number of folders depending on their purpose, specifically: &lt;strong&gt;constitutive&lt;/strong&gt; contains the constitutive functions, &lt;strong&gt;setup&lt;/strong&gt; contains the functions that are required to provide the analysis-specific information, &lt;strong&gt;plotting&lt;/strong&gt; contains the post-processing files and &lt;strong&gt;functions&lt;/strong&gt; contains the remaining M files. AMPLE’s file structure also contains &lt;strong&gt;output&lt;/strong&gt; and &lt;strong&gt;documentation&lt;/strong&gt; that contain the generated VTK files and AMPLE’s html documentation.&lt;/p&gt;

&lt;h2 id=&quot;function-format&quot;&gt;Function format&lt;/h2&gt;

&lt;p&gt;All of AMPLE’s functions share a common file format.  An example AMPLE function is shown below, specifically the function to determine the external forces on the background mesh based on body and point forces at material points, &lt;code class=&quot;highlighter-rouge&quot;&gt;detExtForce.m&lt;/code&gt;, which is called on line 12 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt;. The function starts with a common comment block that includes the following information: (i) brief description/title; (ii) author and date information with a more detailed description of the function’s purpose; (iii) function call format; (iv) required input information; (v) the function’s output; and (vi) a &lt;em&gt;see also&lt;/em&gt; section detailing the functions that are called by the function (in the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;detExtForce.m&lt;/code&gt;, none).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/extForceExample.jpg&quot; alt=&quot;AMPLE function format&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-structures&quot;&gt;Data Structures&lt;/h2&gt;

&lt;p&gt;The majority of the analysis information required by AMPLE is stored in two structured arrays:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;mpData&lt;/strong&gt;: that contains material point information, such as the point’s position, deformation gradient, Cauchy stress, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;mesh&lt;/strong&gt;: that contains information about the background mesh, such as the positions of the nodes and the topology of each of the background mesh elements.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MATLAB’s structured arrays provide a convenient way to store the material point data as different material points will potentially influence different numbers of nodes and therefore will require different amounts of storage for, for example, the basis functions that influence the point and their spatial derivatives.&lt;/p&gt;</content><author><name>AMPLE&amp;#58;  A Material Point Learning Environment</name></author><summary type="html">AMPLE’s high-level structure is below and comprises three loops:</summary></entry><entry><title type="html">Test cases</title><link href="https://wmcoombs.github.io/tests/" rel="alternate" type="text/html" title="Test cases" /><published>2019-01-04T06:00:00+00:00</published><updated>2019-01-04T06:00:00+00:00</updated><id>https://wmcoombs.github.io/tests</id><content type="html" xml:base="https://wmcoombs.github.io/tests/">&lt;p&gt;Three different demonstration cases are included as standard with AMPLE: elastic compaction under self weight, a large deformation elastic beam analysis and elasto-plastic collapse of a body.  Each of the problems are designed to demonstrate a different aspect of AMPLE as described below.&lt;/p&gt;

&lt;h2 id=&quot;convergence-compaction-under-self-weight&quot;&gt;Convergence: compaction under self weight&lt;/h2&gt;

&lt;p&gt;The first example is an elastic column compressed under its own weight. Initially the column has a height of &lt;script type=&quot;math/tex&quot;&gt;l_0=50&lt;/script&gt;m and a width linked to the size of the background grid used to analyse the problem such that there was always one element in the horizontal direction.  A plane strain assumption is set in the third direction.  The base of the column is restrained vertically and both sides of the column are restrained in the horizontal direction.  The column has a Young’s modulus of 1MPa and Poisson’s ratio of 0 and a density of &lt;script type=&quot;math/tex&quot;&gt;\varrho_0=80&lt;/script&gt;kg/m&lt;script type=&quot;math/tex&quot;&gt;^3&lt;/script&gt;.  A body force of &lt;script type=&quot;math/tex&quot;&gt;-800&lt;/script&gt;N/m&lt;script type=&quot;math/tex&quot;&gt;^3&lt;/script&gt; is applied in the vertical (&lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;) direction over 20 equal loadsteps.&lt;/p&gt;

&lt;p&gt;The basic setup information for this analysis, as contained on lines 57 through 67 of &lt;code class=&quot;highlighter-rouge&quot;&gt;setupGrid&lt;/code&gt;, is shown below.  The figure shows the setup information for an analysis with 64 elements in the &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;-direction (nelsy) and a single element in the &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;-direction (nelsx).  The physical body is discretised by generalised interpolation material points (mpType=2), with linear-elastic material behaviour (cmType=1).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/compactionSetup.jpg&quot; alt=&quot;Compaction setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The analytical solution for the vertical Cauchy stress is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sigma^{a}_{yy} = \varrho_0 g (l_0-Y),&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; is the gravitational acceleration (taken to be 10m/s&lt;script type=&quot;math/tex&quot;&gt;^2&lt;/script&gt;), &lt;script type=&quot;math/tex&quot;&gt;l_0&lt;/script&gt; is the initial height of the column and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; is the initial vertical position within the column. If Poisson’s ratio is zero the stresses in the horizontal directions are equal to zero when the behaviour is elastic.&lt;/p&gt;

&lt;p&gt;The below figure shows the convergence of the standard and generalised interpolation material point methods with background mesh and material point refinement.  It is clear that the standard material point method does not converge due to cell crossing errors whereas the generalised interpolation material point method converges at an approximately linear rate.  The figure also shows AMPLE’s run time with progressive background mesh refinement.  For most of the analyses, the run time scales approximately linearly with the number of material points.  However, when the number of elements in the &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;-direction exceeds &lt;script type=&quot;math/tex&quot;&gt;2^{12}&lt;/script&gt; the time spent in the linear solver starts to dominate, with a corresponding increase in the gradient of the run time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/convergence.jpg&quot; alt=&quot;Compaction convergence&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;visualisation-large-deformation-elastic-beam&quot;&gt;Visualisation: large deformation elastic beam&lt;/h2&gt;

&lt;p&gt;To run this demonstration case you will need to change line 03 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt; to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lstps,g,mpData,mesh] = setupGrid_beam;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second demonstration case is a plane strain analysis of an elastic beam subjected to a vertical end load of &lt;script type=&quot;math/tex&quot;&gt;100&lt;/script&gt;kN applied over 50 equal loadsteps.  The beam had an initial length &lt;script type=&quot;math/tex&quot;&gt;l_0=10&lt;/script&gt;m and depth &lt;script type=&quot;math/tex&quot;&gt;d_0=1&lt;/script&gt;m and the material has a Young’s modulus of &lt;script type=&quot;math/tex&quot;&gt;12&lt;/script&gt;MPa and a Poisson’s ratio of &lt;script type=&quot;math/tex&quot;&gt;0.2&lt;/script&gt;.  The geometry and boundary conditions with &lt;script type=&quot;math/tex&quot;&gt;h=0.5&lt;/script&gt;m and &lt;script type=&quot;math/tex&quot;&gt;2^2&lt;/script&gt; material points per initially active background elements are shown below.  The force is split across the two material points closest to the neutral axis at the end of the beam (the black-filled circles).  The neutral axis of the beam is pinned at its left hand edge and roller boundary conditions are imposed on the other background grid nodes at the root of the beam, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/beamSetup.jpg&quot; alt=&quot;Beam setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In AMPLE it is suggested that users use the included scripts to generate VTK files and visualise the deformation of the material points using a VTK view (such as &lt;a href=&quot;https://wci.llnl.gov/simulation/computer-codes/visit/&quot; target=&quot;_blank&quot;&gt;VisIt&lt;/a&gt; or &lt;a href=&quot;https://www.paraview.org/&quot; target=&quot;_blank&quot;&gt;ParaView&lt;/a&gt;).  The VTK files are generated by the following two functions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;makeVtkOutputFile.m                 % generates the background mesh
makeVtkOutputMaterialPoint.m        % generates the material points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The normalised global force versus displacement response for two different background mesh sizes with &lt;script type=&quot;math/tex&quot;&gt;6^2&lt;/script&gt; generalised interpolation material points (mpType=2) per initially populated background grid cell are shown below.  The analytical solution, as detailed in the thesis of [1], is shown by the discrete points.  The global response of both analyses show good agreement with the analytical solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/beamForceDisp.jpg&quot; alt=&quot;Beam force versus displacement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above figure also shows the deformed material point positions at the end of the &lt;script type=&quot;math/tex&quot;&gt;h=0.125&lt;/script&gt;m analysis that have been coloured according to the normal stress in the &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;-direction, &lt;script type=&quot;math/tex&quot;&gt;\sigma_{yy}&lt;/script&gt;.  The figure was produced from the VTK output files that are generated on line 32 of the main &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt; script via &lt;code class=&quot;highlighter-rouge&quot;&gt;postPro.m&lt;/code&gt; and saved into the &lt;strong&gt;output&lt;/strong&gt; folder&lt;/p&gt;

&lt;h2 id=&quot;material-model-elasto-plastic-collapse&quot;&gt;Material model: elasto-plastic collapse&lt;/h2&gt;

&lt;p&gt;To run this demonstration case you will need to change line 03 of &lt;code class=&quot;highlighter-rouge&quot;&gt;ample.m&lt;/code&gt; to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lstps,g,mpData,mesh] = setupGrid_collapse;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The final demonstration example is the elasto-plastic collapse of a rectangular body of material subject to a gravitational body force.  Due to symmetry only half of the body is modelled and the initial discretisation of the problem is shown in below with &lt;script type=&quot;math/tex&quot;&gt;l_0=8&lt;/script&gt;m,  &lt;script type=&quot;math/tex&quot;&gt;h=1&lt;/script&gt;m and &lt;script type=&quot;math/tex&quot;&gt;2^2&lt;/script&gt; material points per initially filled background cell (the grey-shaded region).  Roller boundary conditions are imposed on the base and the left hand edge of the background mesh.    The material is modelled using a linear-elastic, perfectly-plastic von Mises constitutive formulation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/collapseSetup.jpg&quot; alt=&quot;Collapse setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this analysis, the yield strength of the material is &lt;script type=&quot;math/tex&quot;&gt;\rho_y=20&lt;/script&gt;kPa, the Young’s modulus is &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;MPa and Poisson’s ratio is &lt;script type=&quot;math/tex&quot;&gt;0.3&lt;/script&gt;.  A body force of &lt;script type=&quot;math/tex&quot;&gt;10&lt;/script&gt;kN/m&lt;script type=&quot;math/tex&quot;&gt;^3&lt;/script&gt; (density of &lt;script type=&quot;math/tex&quot;&gt;1000&lt;/script&gt;kg/m&lt;script type=&quot;math/tex&quot;&gt;^3&lt;/script&gt; and gravitational acceleration of &lt;script type=&quot;math/tex&quot;&gt;10&lt;/script&gt;m/s&lt;script type=&quot;math/tex&quot;&gt;^2&lt;/script&gt;) is applied over 40 equal loadsteps.&lt;/p&gt;

&lt;p&gt;The deformed material point positions at the end of the analysis for &lt;script type=&quot;math/tex&quot;&gt;h=0.5&lt;/script&gt;m and &lt;script type=&quot;math/tex&quot;&gt;h=0.25&lt;/script&gt;m with &lt;script type=&quot;math/tex&quot;&gt;6^2&lt;/script&gt; material points per initially populated background grid cell are shown below.  The material points are coloured according to &lt;script type=&quot;math/tex&quot;&gt;\sigma_{xx}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\sigma_{yy}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\sigma_{xy}&lt;/script&gt;, where the blue and red regions show areas of low and high stress, respectively.   There is very little deformation for the first 20 loadsteps (up to &lt;script type=&quot;math/tex&quot;&gt;5&lt;/script&gt;kN/m&lt;script type=&quot;math/tex&quot;&gt;^3&lt;/script&gt;) but beyond this value the material rapidly collapses and achieves the final deformed state shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/collapse.jpg&quot; alt=&quot;Collapse&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[1] T. Molstad, Finite deformation analysis using the finite element method, Ph.D. thesis, University of British Columbia, 1977.&lt;/p&gt;</content><author><name>AMPLE&amp;#58;  A Material Point Learning Environment</name></author><summary type="html">Three different demonstration cases are included as standard with AMPLE: elastic compaction under self weight, a large deformation elastic beam analysis and elasto-plastic collapse of a body. Each of the problems are designed to demonstrate a different aspect of AMPLE as described below.</summary></entry><entry><title type="html">Publications</title><link href="https://wmcoombs.github.io/publications/" rel="alternate" type="text/html" title="Publications" /><published>2019-01-03T06:00:00+00:00</published><updated>2019-01-03T06:00:00+00:00</updated><id>https://wmcoombs.github.io/publications</id><content type="html" xml:base="https://wmcoombs.github.io/publications/">&lt;p&gt;The following publications underpin AMPLE.&lt;/p&gt;

&lt;h2 id=&quot;journal-papers&quot;&gt;Journal papers&lt;/h2&gt;

&lt;p&gt;WM Coombs &amp;amp; CE Augarde, &lt;a href=&quot;http://dro.dur.ac.uk/29391/&quot; target=&quot;_blank&quot;&gt;AMPLE: A Material Point Learning Environment&lt;/a&gt;, Advances in Engineering Software (&lt;em&gt;accepted&lt;/em&gt;).
&lt;em&gt;Gold open access&lt;/em&gt; &lt;i class=&quot;ai ai-open-access&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;WM Coombs, CE Augarde, AJ Brennan, MJ Brown, TJ Charlton, JA Knappett, Y Ghaffari Motlagh &amp;amp; L Wang,  &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0045782519305043?via%3Dihub&quot; target=&quot;_blank&quot;&gt;On Lagrangian mechanics and the implicit material point method for large deformation elasto-plasticity&lt;/a&gt;, Computer Methods in Applied Mechanics and Engineering 358 (2020), 112622.
&lt;em&gt;Gold open access&lt;/em&gt; &lt;i class=&quot;ai ai-open-access&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;L Wang , WM Coombs, CE Augarde, M Cortis, TJ Charlton, MJ Brown, JA Knappett, AJ Brennan, C Davidson, D Richards, &amp;amp; A Blake, &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0045782519304074?via%3Dihub&quot; target=&quot;_blank&quot;&gt;On the use of domain-based material point methods for problems involving large distortion&lt;/a&gt;, Computer Methods in Applied Mechanics and Engineering 355 (2019) 1003-1025.
&lt;em&gt;Gold open access&lt;/em&gt; &lt;i class=&quot;ai ai-open-access&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Y Bing, M Cortis, TJ Charlton, WM Coombs &amp;amp; CE Augarde, &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0045794918311490&quot; target=&quot;_blank&quot;&gt;B-spline based boundary conditions in the material point method&lt;/a&gt;, Computers &amp;amp; Structures 212 (2019), 257-274.
&lt;em&gt;Gold open access&lt;/em&gt; &lt;i class=&quot;ai ai-open-access&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;WM Coombs, TJ Charlton, M Cortis &amp;amp; CE Augarde, &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0045782518300124&quot; target=&quot;_blank&quot;&gt;Overcoming volumetric locking in material point methods&lt;/a&gt;, Computer Methods in Applied Mechanics and Engineering 333 (2018), 1-21. &lt;em&gt;Gold open access&lt;/em&gt; &lt;i class=&quot;ai ai-open-access&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;M Cortis, WM Coombs &amp;amp; CE Augarde, &lt;a href=&quot;https://onlinelibrary.wiley.com/doi/abs/10.1002/nme.5606&quot; target=&quot;_blank&quot;&gt;Imposition of essential boundary conditions in the material point method&lt;/a&gt;, International Journal for Numerical Methods in Engineering 113(1) (2018), 130-152.  &lt;em&gt;Gold open access&lt;/em&gt; &lt;i class=&quot;ai ai-open-access&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;TJ Charlton, WM Coombs &amp;amp; CE Augarde, &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0045794917303395?via%3Dihub&quot; target=&quot;_blank&quot;&gt;iGIMP: an implicit Generalised Interpolation Material Point Method for large deformations&lt;/a&gt;, Computers and Structures, 190 (2017), 108-125. &lt;em&gt;Gold open access&lt;/em&gt; &lt;i class=&quot;ai ai-open-access&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&quot;conference-papers&quot;&gt;Conference papers&lt;/h2&gt;

&lt;p&gt;WM Coombs, RS Crouch &amp;amp; CE Augarde (2010), &lt;a href=&quot;http://dro.dur.ac.uk/15418/&quot; target=&quot;_blank&quot;&gt;70-line 3D finite deformation elastoplastic finite-element code&lt;/a&gt;, in Benz, T. &amp;amp; Nordal, S. eds, 7th European Conference on Numerical Methods in Geotechnical Engineering (NUMGE). Trondheim, Norway, Taylor &amp;amp; Francis Group, 151-156.&lt;/p&gt;</content><author><name>AMPLE&amp;#58;  A Material Point Learning Environment</name></author><summary type="html">The following publications underpin AMPLE.</summary></entry><entry><title type="html">Acknowledgements</title><link href="https://wmcoombs.github.io/acknowledgements/" rel="alternate" type="text/html" title="Acknowledgements" /><published>2019-01-02T06:00:00+00:00</published><updated>2019-01-02T06:00:00+00:00</updated><id>https://wmcoombs.github.io/acknowledgements</id><content type="html" xml:base="https://wmcoombs.github.io/acknowledgements/">&lt;p&gt;The development of AMPLE was supported by the UK’s Engineering and Physical Sciences Research Council (grant numbers &lt;a href=&quot;https://gow.epsrc.ukri.org/NGBOViewGrant.aspx?GrantRef=EP/N006054/1&quot; target=&quot;_blank&quot;&gt;EP/N006054/1&lt;/a&gt;, &lt;a href=&quot;https://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/M017494/1&quot; target=&quot;_blank&quot;&gt;EP/M017494/1&lt;/a&gt; and &lt;a href=&quot;https://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/M000397/1&quot; target=&quot;_blank&quot;&gt;EP/M000397/1&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The AMPLE developers would also like to acknowledge the input of Yun Bing, Tim J. Charlton, Michael Cortis, Yousef Ghaffari Motlagh and Lei Wang who have all worked on the material point method at Durham University and contributed to the development of AMPLE in some way.&lt;/p&gt;</content><author><name>AMPLE&amp;#58;  A Material Point Learning Environment</name></author><summary type="html">The development of AMPLE was supported by the UK’s Engineering and Physical Sciences Research Council (grant numbers EP/N006054/1, EP/M017494/1 and EP/M000397/1).</summary></entry><entry><title type="html">Download</title><link href="https://wmcoombs.github.io/download/" rel="alternate" type="text/html" title="Download" /><published>2019-01-01T06:00:00+00:00</published><updated>2019-01-01T06:00:00+00:00</updated><id>https://wmcoombs.github.io/download</id><content type="html" xml:base="https://wmcoombs.github.io/download/">&lt;p&gt;AMPLE can be downloaded &lt;a href=&quot;https://github.com/wmcoombs/AMPLE&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;documentation&lt;/strong&gt; folder within the AMPLE download contains more information on the code structure and should be read before using/modifying the code.  The code should also be read in conjunction with the original AMPLE paper [1].&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[1] WM Coombs &amp;amp; CE Augarde, AMPLE: A Material Point Learning Environment, &lt;em&gt;Advances in Engineering Software&lt;/em&gt; (under review).  Preprint here.&lt;/p&gt;</content><author><name>AMPLE&amp;#58;  A Material Point Learning Environment</name></author><summary type="html">AMPLE can be downloaded here.</summary></entry></feed>